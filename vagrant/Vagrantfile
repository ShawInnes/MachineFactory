# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(2) do |config|
  config.winrm.port = 5985
  config.winrm.guest_port = 5985

  config.winrm.username = "packer"
  config.winrm.password = "packer"

  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.hostmanager.include_offline = true

  config.vm.box = "../boxes/windows_2012_r2-1.0.7.box"

  config.vm.hostname = "octopus.devops"

  config.vm.guest = :windows
  config.vm.communicator = :winrm
  config.vm.network :public_network

  config.vm.network :forwarded_port,   guest: 3389, host: 3389,       id: "rdp",   auto_correct: false
  config.vm.network :forwarded_port,   guest: 5985, host: 5985,       id: "winrm", auto_correct: false

  config.vm.provider "vmware_fusion" do |v|
    v.gui = true
    v.vmx["memsize"] = "2048"
    v.vmx["numvcpus"] = "2"
    v.vmx["ethernet0.virtualDev"] = "e1000"
    v.vmx["ethernet0.connectionType"] = "nat"
    v.vmx["gui.fitguestusingnativedisplayresolution"] = "FALSE"
  end  

  config.vm.provision "proxy", type: "shell" do |s|
    s.path = "scripts/proxy-disable.ps1"
  end
 
  config.vm.provision "wmf", type: "shell" do |s|
$script = <<SCRIPT
    $configContent = Get-Content ${env:ProgramData}\\Chocolatey\\config\\chocolatey.config | ForEach-Object { $_ -replace "<cacheLocation />", "<cacheLocation>\\vagrant</cacheLocation>" }
    Set-Content ${env:ProgramData}\\Chocolatey\\config\\chocolatey.config -Value $configContent
SCRIPT

    s.inline = $script
  end

  config.vm.provision "dev", type: "shell" do |s|
$script = <<SCRIPT
    choco install notepadplusplus
    choco install git.install
    choco install googlechrome
SCRIPT

    s.inline = $script
  end

  config.vm.provision "psget", type: "shell" do |s|
$script = <<SCRIPT
    Get-PackageProvider -Name NuGet -ForceBootstrap
    Register-PsRepository -Name PSGallery -SourceLocation http://www.powershellgallery.com/api/v2/
    Set-PSRepository -Name PSGallery -InstallationPolicy Trusted

    Write-Output "Installing DSC Module xNetworking"
    Install-Module -Name xNetworking -Repository PSGallery

    Write-Output "Installing DSC Module xPSDesiredStateConfiguration"
    Install-Module -Name xPSDesiredStateConfiguration -Repository PSGallery

    Write-Output "Installing DSC Module xWebAdministration"
    Install-Module -Name xWebAdministration -Repository PSGallery

    Write-Output "Installing DSC Module xSystemSecurity"
    Install-Module -Name xSystemSecurity -Repository PSGallery

    Write-Output "Installing DSC Module xTimeZone"
    Install-Module -Name xTimeZone -Repository PSGallery
SCRIPT

    s.inline = $script
  end

  config.vm.provision "octopus", type: "shell" do |s|
$script = <<SCRIPT
    choco install octopusdeploy
    choco install octopusdeploy.tentacle
    choco install octopustools
SCRIPT

    s.inline = $script
  end

  config.vm.provision "octopus-server", type: "shell" do |s|
    s.path = "scripts/octopus-server.ps1"
  end

  config.vm.provision "octopus-tentacle", type: "shell" do |s|
    s.path = "scripts/octopus-tentacle.ps1"
  end
end
