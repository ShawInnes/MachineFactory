#!/usr/bin/env ruby
require 'spec_helper'

describe Puppet::Type.type(:dsc_<%= resource.friendlyname.downcase %>) do

  let :dsc_<%= resource.friendlyname.downcase %> do
    Puppet::Type.type(:dsc_<%= resource.friendlyname.downcase %>).new(
      :name     => <%= format_type_value(@spec_test_values['string']) %>,
<%  resource.properties.select{|rp| rp.required? }.each do |property| -%>
<%    if property.values -%>
      :dsc_<%= property.name.downcase %> => '<%= property.values.first %>',
<%    else -%>
      :dsc_<%= property.name.downcase %> => <%= format_type_value(@spec_test_values[property.type]) %>,
<%    end -%>
<%  end -%>
    )
  end

  it "should stringify normally" do
    expect(dsc_<%= resource.friendlyname.downcase %>.to_s).to eq("Dsc_<%= resource.friendlyname.downcase %>[<%= @spec_test_values['string'] %>]")
  end
<%  if resource.ensurable? -%>

  it 'should default to ensure => present' do
    expect(dsc_<%= resource.friendlyname.downcase %>[:ensure]).to eq :present
  end
<%  end # resource.ensurable? -%>
<%  resource.properties.each do |property| -%>
<%    if property.required? -%>

  it 'should require that dsc_<%= property.name.downcase %> is specified' do
    #dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]
    expect { Puppet::Type.type(:dsc_<%= resource.friendlyname.downcase %>).new(
      :name     => <%= format_type_value(@spec_test_values['string']) %>,
<%      resource.properties.select{|rp| rp.name != property.name}.each do |other_property| -%>
<%        if other_property.values -%>
      :dsc_<%= other_property.name.downcase %> => '<%= other_property.values.first %>',
<%        else -%>
      :dsc_<%= other_property.name.downcase %> => <%= format_type_value(@spec_test_values[other_property.type]) || 'nil' %>,
<%        end # if other_property.values -%>
<%      end # each -%>
    )}.to raise_error(Puppet::Error, /dsc_<%= property.name.downcase %> is a required attribute/)
  end
<%    end # if property.required? -%>
<%    if property.values -%>
<%      property.values.each do |value| -%>

  it 'should accept dsc_<%= property.name.downcase %> predefined value <%= value %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = '<%= value %>'
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq('<%= value %>')
  end

  it 'should accept dsc_<%= property.name.downcase %> predefined value <%= value.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = '<%= value.downcase %>'
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq('<%= value.downcase %>')
  end
<%        if property.name.downcase == 'ensure' -%>

  it 'should accept dsc_ensure predefined value <%= value.downcase %> and update ensure with this value (ensure end value should be a symbol)' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_ensure] = '<%= value.downcase %>'
    expect(dsc_<%= resource.friendlyname.downcase %>[:ensure]).to eq(dsc_<%= resource.friendlyname.downcase %>[:dsc_ensure].downcase.to_sym)
  end
<%        end # if property.name.downcase.... -%>
<%      end # property.values.each....-%>

  it 'should not accept values not equal to predefined values' do
    expect{dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = 'invalid value'}.to raise_error(Puppet::ResourceError)
  end
<%    end # if property.values -%>
<%    if property.array? -%>
<%      if property.values -%>

  it 'should accept array of predefined values for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= property.values %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= property.values %>)
  end
<%      else # if property.values -%>

  it 'should accept array for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values[property.type]) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= format_type_value(@spec_test_values[property.type]) %>)
  end
<%      end # if property.values -%>
<%    else # if property.array? -%>

  it 'should not accept array for dsc_<%= property.name.downcase %>' do
    expect{dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values['string[]']) %>}.to raise_error(Puppet::ResourceError)
  end
<%    end # if property.array? -%>
<%    if property.bool? -%>

  it 'should accept boolean for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values[property.type]) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= format_type_value(@spec_test_values[property.type]) %>)
  end
<%      @spec_test_values['munged_bools'].each do |munged_bool| %>
  it "should accept boolean-like value <%= format_type_value(munged_bool) %> and munge this value to boolean for dsc_<%= property.name.downcase %>" do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(munged_bool) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= munged_bool.to_s.downcase.to_bool %>)
  end
<%      end #  @spec_test_values['munged_bools']... -%>
<%    else # if property.bool? -%>

  it 'should not accept boolean for dsc_<%= property.name.downcase %>' do
    expect{dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values['boolean']) %>}.to raise_error(Puppet::ResourceError)
  end
<%    end # if property.bool? -%>
<%    if property.int? -%>

  it 'should accept int for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values[property.type]) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= format_type_value(@spec_test_values[property.type]) %>)
  end
<%      @spec_test_values['munged_ints'].each do |munged_int| %>

  it 'should accept string-like int for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(munged_int) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= format_type_value(munged_int.to_i) %>)
  end
<%      end #  @spec_test_values['munged_ints']... -%>

<%    else # if property.int? -%>

  it 'should not accept int for dsc_<%= property.name.downcase %>' do
    expect{dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values['int']) %>}.to raise_error(Puppet::ResourceError)
  end
<%    end # if property.uint? -%>
<%    if property.uint? or property.int? -%>

  it 'should accept uint for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values[property.type]) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= format_type_value(@spec_test_values[property.type]) %>)
  end
<%      @spec_test_values['munged_uints'].each do |munged_uint| %>

  it 'should accept string-like int for dsc_<%= property.name.downcase %>' do
    dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(munged_uint) %>
    expect(dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>]).to eq(<%= format_type_value(munged_uint.to_i) %>)
  end
<%      end #  @spec_test_values['munged_ints']... -%>
<%    else # if property.uint? or property.int? -%>

  it 'should not accept uint for dsc_<%= property.name.downcase %>' do
    expect{dsc_<%= resource.friendlyname.downcase %>[:dsc_<%= property.name.downcase %>] = <%= format_type_value(@spec_test_values['uint']) %>}.to raise_error(Puppet::ResourceError)
  end
<%    end # if property.uint? -%>
<%  end # resource.properties.each... -%>

  # Configuration PROVIDER TESTS

  describe "dsc_configuration provider tests" do

    it "should successfully instanciate the provider" do
      described_class.provider(:dsc_configuration).new(dsc_<%= resource.friendlyname.downcase %>)
    end

    before(:each) do
      @provider = described_class.provider(:dsc_configuration).new(dsc_<%= resource.friendlyname.downcase %>)
    end
<%  unless ['msft_filedirectoryconfiguration'].include?(resource.name.downcase) -%>
<%    if resource.ps_module.name -%>

    describe "when dscmeta_import_resource is true (default) and dscmeta_module_name existing/is defined " do

      it "should compute powershell dsc test script with Import-DscResource" do
        expect(@provider.ps_script_content('test')).to match(/Import-DscResource/)
      end

      it "should compute powershell dsc set script with Import-DscResource" do
        expect(@provider.ps_script_content('set')).to match(/Import-DscResource/)
      end

    end

    describe "when dscmeta_import_resource is false" do

      it "should compute powershell dsc test script without Import-DscResource" do
        dsc_<%= resource.friendlyname.downcase %>[:dscmeta_import_resource] = false
        expect(@provider.ps_script_content('test')).not_to match(/Import-DscResource/)
      end

      it "should compute powershell dsc set script without Import-DscResource" do
        dsc_<%= resource.friendlyname.downcase %>[:dscmeta_import_resource] = false
        expect(@provider.ps_script_content('set')).not_to match(/Import-DscResource/)
      end

    end
<%    end # if resource.ps_module.name -%>
<%  end # unless ['msft_filedirectoryconfiguration'].... -%>
<%  if resource.ensurable? -%>

    describe "when dsc_ensure is 'present'" do

      before(:each) do
        dsc_<%= resource.friendlyname.downcase %>.original_parameters[:dsc_ensure] = 'present'
        dsc_<%= resource.friendlyname.downcase %>[:dsc_ensure] = 'present'
        @provider = described_class.provider(:dsc_configuration).new(dsc_<%= resource.friendlyname.downcase %>)
      end

      it "should update :ensure to :present" do
        expect(dsc_<%= resource.friendlyname.downcase %>[:ensure]).to eq(:present)
      end

      it "should compute powershell dsc test script in which ensure value is 'present'" do
        @provider.set_test_dsc_parameters
        expect(@provider.ps_script_content('test')).to match(/ensure = 'present'/)
      end

      it "should compute powershell dsc set script in which ensure value is 'present'" do
        @provider.set_original_dsc_parameters
        expect(@provider.ps_script_content('set')).to match(/ensure = 'present'/)
      end

    end

    describe "when dsc_ensure is 'absent'" do

      before(:each) do
        dsc_<%= resource.friendlyname.downcase %>.original_parameters[:dsc_ensure] = 'absent'
        dsc_<%= resource.friendlyname.downcase %>[:dsc_ensure] = 'absent'
        @provider = described_class.provider(:dsc_configuration).new(dsc_<%= resource.friendlyname.downcase %>)
      end

      it "should update :ensure to :absent" do
        expect(dsc_<%= resource.friendlyname.downcase %>[:ensure]).to eq(:absent)
      end

      it "should compute powershell dsc test script in which ensure value is 'present'" do
        @provider.set_test_dsc_parameters
        expect(@provider.ps_script_content('test')).to match(/ensure = 'present'/)
      end

      it "should compute powershell dsc set script in which ensure value is 'absent'" do
        @provider.set_original_dsc_parameters
        expect(@provider.ps_script_content('set')).to match(/ensure = 'absent'/)
      end

    end
<%  end # if resource.ensurable? -%>

  end

  # mof PROVIDERS TESTS

  describe "mof provider tests" do

    it "should successfully instanciate the provider" do
      described_class.provider(:dsc_mof).new(dsc_<%= resource.friendlyname.downcase %>)
    end

    before(:each) do
      @provider = described_class.provider(:dsc_mof).new(dsc_<%= resource.friendlyname.downcase %>)
    end

    it "should successfully build mof file" do
#     expect(@provider.mof_test_content).to match(/instance of <%= resource.name %> as $<%= resource.name %>1ref$/)
      expect(@provider.mof_test_content).to match(/instance of <%= resource.name %>/)
    end

<%  if resource.ensurable? -%>

    describe "when dsc_ensure is 'present'" do

      before(:each) do
        dsc_<%= resource.friendlyname.downcase %>[:dsc_ensure] = 'present'
        @provider = described_class.provider(:dsc_mof).new(dsc_<%= resource.friendlyname.downcase %>)
      end

      it "should update :ensure to :present" do
        expect(dsc_<%= resource.friendlyname.downcase %>[:ensure]).to eq(:present)
      end

    end

    describe "when dsc_ensure is 'absent'" do

      before(:each) do
        dsc_<%= resource.friendlyname.downcase %>[:dsc_ensure] = 'absent'
        @provider = described_class.provider(:dsc_mof).new(dsc_<%= resource.friendlyname.downcase %>)
      end

      it "should update :ensure to :absent" do
        expect(dsc_<%= resource.friendlyname.downcase %>[:ensure]).to eq(:absent)
      end

    end
<%  end # if resource.ensurable? -%>

  end
end
